import React, { useContext, useEffect, useState } from "react";
import { View, Text, StyleSheet, ScrollView, Alert, ActivityIndicator } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import BottonComponent from "../../components/BottonComponent";
import { ThemeContext } from "../../components/ThemeContext";
import ThemeSwitcher from "../../components/ThemeSwitcher";
import AsyncStorage from "@react-native-async-storage/async-storage";
import apiConexion from "../../Src/Service/Conexion";

export default function PerfilScreenRecepcionista({ navigation }) {
  const { theme } = useContext(ThemeContext);
  const [usuario, setUsuario] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const cargarPerfil = async () => {
      try {
        const token = await AsyncStorage.getItem("userToken");
        if (!token) {
          Alert.alert("Error de autenticación", "No se encontró el token de usuario, por favor, inicia sesión de nuevo.");
          navigation.navigate("Login"); 
          return;
        }

        const response = await apiConexion.get("/me");
        setUsuario(response.data);
      } catch (error) {
        console.error("Error al cargar el perfil", error);

        if (error.response) {
          Alert.alert(
            "Error del servidor",
            `Error ${error.response.status}: ${error.response.data?.message || "Ocurrió un error al cargar el perfil."}`
          );
        } else if (error.request) {
          Alert.alert("Error de conexión", "No se pudo conectar al servidor. Verifica tu conexión a internet.");
        } else {
          Alert.alert("Error", "Ocurrió un error inesperado al cargar el perfil.");
        }
        await AsyncStorage.removeItem("userToken");
      } finally {
        setLoading(false);
      }
    };
    cargarPerfil();
  }, []);

  if (loading) {
    return (
      <View style={[styles.container, styles.centerContent, { backgroundColor: theme.background }]}>
        <ActivityIndicator size="large" color={theme.text} />
        <Text style={[styles.loadingText, { color: theme.text }]}>Cargando perfil...</Text>
      </View>
    );
  }

  if (!usuario) {
    return (
      <View style={[styles.container, styles.centerContent, { backgroundColor: theme.background }]}>
        <Text style={[styles.errorText, { color: theme.text }]}>No se pudo cargar el perfil.</Text>
      </View>
    );
  }

  return (
    <ScrollView style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header de la pantalla */}
      <View style={styles.header}>
        <Ionicons name="person-circle-outline" size={80} color={theme.text} />
        <Text style={[styles.profileName, { color: theme.text }]}>
          {usuario.nombre} {usuario.apellido}
        </Text>
        <Text style={[styles.profileEmail, { color: theme.subtitle }]}>
          {usuario.email}
        </Text>
      </View>

      {/* Sección de Datos Personales */}
      <View style={[styles.infoCard, { backgroundColor: theme.cardBackground }]}>
        <Text style={[styles.sectionTitle, { color: theme.text, borderBottomColor: theme.border }]}>
          Datos Personales
        </Text>

        <View style={styles.infoRow}>
          <Ionicons name="document-text-outline" size={20} color={theme.subtitle} />
          <Text style={[styles.infoLabel, { color: theme.subtitle }]}>Documento:</Text>
          <Text style={[styles.infoValue, { color: theme.text }]}>{usuario.documento}</Text>
        </View>

        <View style={styles.infoRow}>
          <Ionicons name="mail-outline" size={20} color={theme.subtitle} />
          <Text style={[styles.infoLabel, { color: theme.subtitle }]}>Correo Electrónico:</Text>
          <Text style={[styles.infoValue, { color: theme.text }]}>{usuario.email}</Text>
        </View>

        <View style={styles.infoRow}>
          <Ionicons name="call-outline" size={20} color={theme.subtitle} />
          <Text style={[styles.infoLabel, { color: theme.subtitle }]}>Teléfono:</Text>
          <Text style={[styles.infoValue, { color: theme.text }]}>{usuario.telefono}</Text>
        </View>
      </View>

      {/* Botón para editar perfil */}
      <BottonComponent
        title="Editar Perfil"
        onPress={() => navigation.navigate("EditarPaciente")}
        style={[styles.editButton, { backgroundColor: theme.primary }]}
      />

      {/* Botón de cambiar tema más abajo */}
      <View style={styles.themeSwitcherContainer}>
        <ThemeSwitcher />
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 15,
  },
  centerContent: {
    justifyContent: "center",
    alignItems: "center",
  },
  header: {
    alignItems: "center",
    marginBottom: 40,
    marginTop: 60,
  },
  profileName: {
    fontSize: 24,
    fontWeight: "bold",
    marginTop: 10,
  },
  profileEmail: {
    fontSize: 14,
  },
  infoCard: {
    padding: 20,
    borderRadius: 10,
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 15,
    borderBottomWidth: 1,
    paddingBottom: 10,
  },
  infoRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  infoLabel: {
    fontWeight: "bold",
    marginLeft: 10,
    width: 160,
  },
  infoValue: {
    flex: 1,
  },
  editButton: {
    marginBottom: 40,
  },
  themeSwitcherContainer: {
    top: -410,
    alignItems: "center",
  },
  loadingText: {
    marginTop: 10,
  },
  errorText: {
    fontSize: 16,
    textAlign: "center",
  },
});